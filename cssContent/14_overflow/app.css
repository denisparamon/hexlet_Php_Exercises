body {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100vw;
    height: 100vh;
    margin: 0;

    color: #1e293b;
    font: 18px/1.5 sans-serif;

    background: #f8fafc;
}

small {
    color: #626976;
}

.notifications {
    width: 500px;
    height: 500px;
    padding: 1rem;

    overflow: auto;

    background: #fff;
    border: 1px solid rgb(98 105 118 / 16%);
    box-shadow: rgb(30 41 59 / 4%) 0 2px 4px 0;
}

.notifications-item {
    padding: 1rem 0;

    border-bottom: 1px solid rgb(98 105 118 / 16%);
}

.notifications-item:last-child {
    padding-bottom: 0;

    border: none;
}

.notifications-item h3 {
    margin: 0;

    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.notifications-item p {
    margin: 0;
}

/* __tests__ */

const { test, expect } = require('@playwright/test');

const settings = {
    screenshot: {
    type: 'jpeg',
    quality: 70,
    fullPage: true,
},
viewport: {
    width: 600,
    height: 700,
},
};

let page;

test.beforeAll(async ({ browser }) => {
                                        page = await browser.newPage();
                                        await page.goto('/');
                                        await page.setViewportSize(settings.viewport);
                                    });

test.afterAll(async () => {
                            await page.close();
                        });

test.describe('Component «Notification»', () => {
                                                  test.describe.configure({ mode: 'serial' });

                                              test('Layout should be equal to template', async () => {
                                                  const template = await page
                                                  .locator('body')
                                                  .screenshot(settings.screenshot);

                                              expect(template).toMatchSnapshot();
                                              });

                                              test('Layout should be scrollable', async () => {
                                                  await page.evaluate(() => {
                                                  const element = document.querySelector(".notifications");
                                                  element.scrollTop = element.offsetHeight;
                                              });

                                                  const template = await page
                                                  .locator('body')
                                                  .screenshot(settings.screenshot);

                                              expect(template).toMatchSnapshot();
                                              });
                                              });